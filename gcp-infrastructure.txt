# Google Cloud Platform Infrastructure Configuration
# This includes App Engine, Cloud Functions, Firestore, and AI Platform

# app.yaml - Google App Engine Configuration
runtime: python39
entrypoint: gunicorn -b :$PORT main:app

instance_class: F4_1G

automatic_scaling:
  target_cpu_utilization: 0.65
  min_instances: 2
  max_instances: 100
  max_concurrent_requests: 80

env_variables:
  PROJECT_ID: "medical-diagnostic-system"
  FIRESTORE_DATABASE: "patient-encounters"
  
handlers:
- url: /api/.*
  script: auto
  secure: always
  
- url: /.*
  static_files: static/index.html
  upload: static/index.html
  secure: always

# requirements.txt for backend
# numpy==1.24.3
# pandas==2.0.3
# scipy==1.10.1
# scikit-learn==1.3.0
# spacy==3.6.0
# transformers==4.30.2
# google-cloud-firestore==2.11.1
# google-cloud-storage==2.10.0
# google-cloud-aiplatform==1.28.0
# google-cloud-tasks==2.13.1
# flask==2.3.2
# flask-cors==4.0.0
# gunicorn==20.1.0

---
# cloudbuild.yaml - CI/CD Pipeline
steps:
  # Build the container image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/diagnostic-engine:$COMMIT_SHA', '.']
    
  # Push the container image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/diagnostic-engine:$COMMIT_SHA']
    
  # Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'diagnostic-engine'
      - '--image'
      - 'gcr.io/$PROJECT_ID/diagnostic-engine:$COMMIT_SHA'
      - '--region'
      - 'us-central1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--memory'
      - '4Gi'
      - '--cpu'
      - '2'
      - '--timeout'
      - '300'
      - '--concurrency'
      - '1000'
      - '--max-instances'
      - '100'

images:
  - 'gcr.io/$PROJECT_ID/diagnostic-engine:$COMMIT_SHA'

---
# terraform/main.tf - Infrastructure as Code
terraform {
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 4.0"
    }
  }
}

provider "google" {
  project = var.project_id
  region  = var.region
}

# Firestore Database
resource "google_firestore_database" "database" {
  project     = var.project_id
  name        = "(default)"
  location_id = var.region
  type        = "FIRESTORE_NATIVE"
}

# Cloud Storage Buckets
resource "google_storage_bucket" "medical_literature" {
  name          = "${var.project_id}-medical-literature"
  location      = var.region
  force_destroy = false
  
  lifecycle_rule {
    condition {
      age = 365
    }
    action {
      type = "SetStorageClass"
      storage_class = "NEARLINE"
    }
  }
}

resource "google_storage_bucket" "patient_data" {
  name          = "${var.project_id}-patient-data"
  location      = var.region
  force_destroy = false
  
  encryption {
    default_kms_key_name = google_kms_crypto_key.patient_data_key.id
  }
}

# KMS for encryption
resource "google_kms_key_ring" "medical_system" {
  name     = "medical-system-keyring"
  location = var.region
}

resource "google_kms_crypto_key" "patient_data_key" {
  name            = "patient-data-key"
  key_ring        = google_kms_key_ring.medical_system.id
  rotation_period = "86400s"
}

# Pub/Sub for async processing
resource "google_pubsub_topic" "diagnosis_requests" {
  name = "diagnosis-requests"
}

resource "google_pubsub_subscription" "diagnosis_processor" {
  name  = "diagnosis-processor-sub"
  topic = google_pubsub_topic.diagnosis_requests.name
  
  ack_deadline_seconds = 600
  
  retry_policy {
    minimum_backoff = "10s"
    maximum_backoff = "600s"
  }
}

# Cloud Tasks for batch processing
resource "google_cloud_tasks_queue" "literature_scraping" {
  name     = "literature-scraping-queue"
  location = var.region
  
  rate_limits {
    max_concurrent_dispatches = 10
    max_dispatches_per_second = 5
  }
  
  retry_config {
    max_attempts = 5
    max_retry_duration = "3600s"
    min_backoff = "10s"
    max_backoff = "300s"
  }
}

# Vertex AI for ML workloads
resource "google_vertex_ai_dataset" "medical_dataset" {
  display_name        = "medical-diagnostic-dataset"
  metadata_schema_uri = "gs://google-cloud-aiplatform/schema/dataset/metadata/medical_1.0.0.yaml"
  region              = var.region
}

# Cloud Functions for specific tasks
resource "google_cloudfunctions2_function" "nlp_processor" {
  name        = "nlp-medical-processor"
  location    = var.region
  description = "Process medical text using NLP"
  
  build_config {
    runtime     = "python39"
    entry_point = "process_medical_text"
    source {
      storage_source {
        bucket = google_storage_bucket.cloud_functions.name
        object = google_storage_bucket_object.nlp_function_source.name
      }
    }
  }
  
  service_config {
    max_instance_count = 100
    min_instance_count = 1
    available_memory   = "2Gi"
    timeout_seconds    = 300
    
    environment_variables = {
      PROJECT_ID = var.project_id
    }
  }
}

# BigQuery for analytics
resource "google_bigquery_dataset" "medical_analytics" {
  dataset_id                  = "medical_analytics"
  friendly_name               = "Medical Diagnostic Analytics"
  description                 = "Analytics dataset for diagnostic system"
  location                    = var.region
  default_table_expiration_ms = 7776000000  # 90 days
  
  access {
    role          = "OWNER"
    user_by_email = var.admin_email
  }
}

resource "google_bigquery_table" "diagnosis_results" {
  dataset_id = google_bigquery_dataset.medical_analytics.dataset_id
  table_id   = "diagnosis_results"
  
  time_partitioning {
    type = "DAY"
    field = "timestamp"
  }
  
  schema = jsonencode([
    {
      name = "encounter_id"
      type = "STRING"
      mode = "REQUIRED"
    },
    {
      name = "patient_id"
      type = "STRING"
      mode = "REQUIRED"
    },
    {
      name = "timestamp"
      type = "TIMESTAMP"
      mode = "REQUIRED"
    },
    {
      name = "diagnoses"
      type = "RECORD"
      mode = "REPEATED"
      fields = [
        {
          name = "icd10_code"
          type = "STRING"
          mode = "REQUIRED"
        },
        {
          name = "probability"
          type = "FLOAT64"
          mode = "REQUIRED"
        },
        {
          name = "bayesian_score"
          type = "FLOAT64"
          mode = "NULLABLE"
        },
        {
          name = "kuramoto_score"
          type = "FLOAT64"
          mode = "NULLABLE"
        }
      ]
    }
  ])
}

# API Gateway
resource "google_api_gateway_api" "medical_api" {
  provider = google-beta
  api_id   = "medical-diagnostic-api"
}

resource "google_api_gateway_api_config" "medical_api_config" {
  provider      = google-beta
  api           = google_api_gateway_api.medical_api.api_id
  api_config_id = "medical-api-config"
  
  openapi_documents {
    document {
      path = "openapi.yaml"
      contents = filebase64("openapi.yaml")
    }
  }
  
  lifecycle {
    create_before_destroy = true
  }
}

resource "google_api_gateway_gateway" "medical_gateway" {
  provider   = google-beta
  api_config = google_api_gateway_api_config.medical_api_config.id
  gateway_id = "medical-gateway"
  region     = var.region
}

# Variables
variable "project_id" {
  description = "GCP Project ID"
  type        = string
}

variable "region" {
  description = "GCP Region"
  type        = string
  default     = "us-central1"
}

variable "admin_email" {
  description = "Admin email for permissions"
  type        = string
}

---
# kubernetes/deployment.yaml - For GKE deployment option
apiVersion: apps/v1
kind: Deployment
metadata:
  name: diagnostic-engine
  labels:
    app: diagnostic-engine
spec:
  replicas: 3
  selector:
    matchLabels:
      app: diagnostic-engine
  template:
    metadata:
      labels:
        app: diagnostic-engine
    spec:
      containers:
      - name: diagnostic-engine
        image: gcr.io/PROJECT_ID/diagnostic-engine:latest
        ports:
        - containerPort: 8080
        env:
        - name: PROJECT_ID
          value: "medical-diagnostic-system"
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: "/var/secrets/google/key.json"
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        volumeMounts:
        - name: google-cloud-key
          mountPath: /var/secrets/google
      volumes:
      - name: google-cloud-key
        secret:
          secretName: diagnostic-engine-key

---
# Service
apiVersion: v1
kind: Service
metadata:
  name: diagnostic-engine-service
spec:
  selector:
    app: diagnostic-engine
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: LoadBalancer

---
# HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: diagnostic-engine-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: diagnostic-engine
  minReplicas: 3
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80